Index.PACKAGES = {"org.apache.spark.sql.shim.hash" : [{"name" : "org.apache.spark.sql.shim.hash.Digest", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "digest", "tail" : "(): Array[Long]", "member" : "org.apache.spark.sql.shim.hash.Digest.digest", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#digest:Array[Long]", "kind" : "abstract def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int): Unit", "member" : "org.apache.spark.sql.shim.hash.Digest.hashBytes", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#hashBytes(base:Array[Byte],offset:Int,length:Int):Unit", "kind" : "abstract def"}, {"label" : "hashLong", "tail" : "(l: Long): Unit", "member" : "org.apache.spark.sql.shim.hash.Digest.hashLong", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#hashLong(l:Long):Unit", "kind" : "abstract def"}, {"label" : "hashInt", "tail" : "(i: Int): Unit", "member" : "org.apache.spark.sql.shim.hash.Digest.hashInt", "link" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html#hashInt(i:Int):Unit", "kind" : "abstract def"}], "shortDescription" : "Basic digest implementation for Array[Long] based hashes", "trait" : "org\/apache\/spark\/sql\/shim\/hash\/Digest.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.shim.hash.DigestFactory", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.apache.spark.sql.shim.hash.DigestFactory.length", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#length:Int", "kind" : "abstract def"}, {"label" : "fresh", "tail" : "(): Digest", "member" : "org.apache.spark.sql.shim.hash.DigestFactory.fresh", "link" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html#fresh:org.apache.spark.sql.shim.hash.Digest", "kind" : "abstract def"}], "shortDescription" : "Factory to get a new or reset digest for each row", "trait" : "org\/apache\/spark\/sql\/shim\/hash\/DigestFactory.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.shim.hash.HashLongsExpression", "shortDescription" : "A function that calculates hash value for a group of expressions.", "members_class" : [{"label" : "computeHash", "tail" : "(input: String, dataType: DataType, result: String, ctx: CodegenContext): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.computeHash", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#computeHash(input:String,dataType:org.apache.spark.sql.types.DataType,result:String,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):String", "kind" : "def"}, {"label" : "genHashForStruct", "tail" : "(ctx: CodegenContext, input: String, result: String, fields: Array[StructField]): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashForStruct", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashForStruct(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,fields:Array[org.apache.spark.sql.types.StructField]):String", "kind" : "def"}, {"label" : "genHashForArray", "tail" : "(ctx: CodegenContext, input: String, result: String, elementType: DataType, containsNull: Boolean): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashForArray", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashForArray(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,elementType:org.apache.spark.sql.types.DataType,containsNull:Boolean):String", "kind" : "def"}, {"label" : "genHashForMap", "tail" : "(ctx: CodegenContext, input: String, result: String, keyType: DataType, valueType: DataType, valueContainsNull: Boolean): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashForMap", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashForMap(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,keyType:org.apache.spark.sql.types.DataType,valueType:org.apache.spark.sql.types.DataType,valueContainsNull:Boolean):String", "kind" : "def"}, {"label" : "genHashString", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashString(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashCalendarInterval", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashCalendarInterval", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashCalendarInterval(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashTimestamp", "tail" : "(t: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashTimestamp", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashTimestamp(t:String,result:String):String", "kind" : "def"}, {"label" : "genHashDecimal", "tail" : "(ctx: CodegenContext, d: DecimalType, input: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashDecimal", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashDecimal(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,d:org.apache.spark.sql.types.DecimalType,input:String,result:String):String", "kind" : "def"}, {"label" : "genHashDouble", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashDouble", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashDouble(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashFloat", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashFloat", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashFloat(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashBoolean", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashBoolean", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashBoolean(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashBytes", "tail" : "(b: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashBytes", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashBytes(b:String,result:String):String", "kind" : "def"}, {"label" : "genHashLong", "tail" : "(l: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashLong", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashLong(l:String,result:String):String", "kind" : "def"}, {"label" : "genHashInt", "tail" : "(i: String, result: String): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.genHashInt", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genHashInt(i:String,result:String):String", "kind" : "def"}, {"label" : "nullSafeElementHash", "tail" : "(input: String, index: String, nullable: Boolean, elementType: DataType, result: String, ctx: CodegenContext): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.nullSafeElementHash", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#nullSafeElementHash(input:String,index:String,nullable:Boolean,elementType:org.apache.spark.sql.types.DataType,result:String,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):String", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.eval", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.nullable", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.foldable", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.dataType", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"member" : "org.apache.spark.sql.shim.hash.HashLongsExpression#<init>", "error" : "unsupported entity"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hasherClassName", "tail" : "(): String", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.hasherClassName", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#hasherClassName:String", "kind" : "abstract def"}, {"label" : "computeHash", "tail" : "(value: Any, dataType: DataType, hash: Digest): Unit", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.computeHash", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#computeHash(value:Any,dataType:org.apache.spark.sql.types.DataType,hash:org.apache.spark.sql.shim.hash.Digest):Unit", "kind" : "abstract def"}, {"label" : "asStruct", "tail" : ": Boolean", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.asStruct", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#asStruct:Boolean", "kind" : "abstract val"}, {"label" : "factory", "tail" : ": DigestFactory", "member" : "org.apache.spark.sql.shim.hash.HashLongsExpression.factory", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#factory:org.apache.spark.sql.shim.hash.DigestFactory", "kind" : "abstract val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/sql\/shim\/hash\/HashLongsExpression.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction", "shortDescription" : "Base class for interpreted hash functions.", "members_class" : [{"label" : "hash", "tail" : "(value: Any, dataType: DataType, digest: Digest): Digest", "member" : "org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction.hash", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#hash(value:Any,dataType:org.apache.spark.sql.types.DataType,digest:org.apache.spark.sql.shim.hash.Digest):org.apache.spark.sql.shim.hash.Digest", "kind" : "def"}, {"member" : "org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int, digest: Digest): Digest", "member" : "org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction.hashBytes", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#hashBytes(base:Array[Byte],offset:Int,length:Int,digest:org.apache.spark.sql.shim.hash.Digest):org.apache.spark.sql.shim.hash.Digest", "kind" : "abstract def"}, {"label" : "hashLong", "tail" : "(l: Long, digest: Digest): Digest", "member" : "org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction.hashLong", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#hashLong(l:Long,digest:org.apache.spark.sql.shim.hash.Digest):org.apache.spark.sql.shim.hash.Digest", "kind" : "abstract def"}, {"label" : "hashInt", "tail" : "(i: Int, digest: Digest): Digest", "member" : "org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction.hashInt", "link" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html#hashInt(i:Int,digest:org.apache.spark.sql.shim.hash.Digest):org.apache.spark.sql.shim.hash.Digest", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/sql\/shim\/hash\/InterpretedHashLongsFunction.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.shim.hash.SafeUTF8", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html", "members_object" : [{"label" : "safeUT8ByteArray", "tail" : "(s: UTF8String): (Array[Byte], Int, Int)", "member" : "org.apache.spark.sql.shim.hash.SafeUTF8.safeUT8ByteArray", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#safeUT8ByteArray(s:org.apache.spark.unsafe.types.UTF8String):(Array[Byte],Int,Int)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/hash\/SafeUTF8$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark" : [], "org.apache" : [], "com.sparkutils" : [], "org.apache.spark.sql.shim" : [{"name" : "org.apache.spark.sql.shim.Invoke5", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Invoke): Option[(Expression, String, DataType, Seq[Expression], Seq[AbstractDataType])]", "member" : "org.apache.spark.sql.shim.Invoke5.unapply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.Invoke):Option[(org.apache.spark.sql.catalyst.expressions.Expression,String,org.apache.spark.sql.types.DataType,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType])]", "kind" : "def"}, {"label" : "apply", "tail" : "(targetObject: Expression, functionName: String, dataType: DataType, arguments: Seq[Expression], methodInputTypes: Seq[AbstractDataType]): Expression", "member" : "org.apache.spark.sql.shim.Invoke5.apply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#apply(targetObject:org.apache.spark.sql.catalyst.expressions.Expression,functionName:String,dataType:org.apache.spark.sql.types.DataType,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],methodInputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.Invoke6", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Invoke): Option[(Expression, String, DataType, Seq[Expression], Seq[AbstractDataType], Boolean)]", "member" : "org.apache.spark.sql.shim.Invoke6.unapply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.Invoke):Option[(org.apache.spark.sql.catalyst.expressions.Expression,String,org.apache.spark.sql.types.DataType,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(targetObject: Expression, functionName: String, dataType: DataType, arguments: Seq[Expression], methodInputTypes: Seq[AbstractDataType], propagateNull: Boolean): Expression", "member" : "org.apache.spark.sql.shim.Invoke6.apply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#apply(targetObject:org.apache.spark.sql.catalyst.expressions.Expression,functionName:String,dataType:org.apache.spark.sql.types.DataType,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],methodInputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke6$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.Invoke7", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Invoke): Option[(Expression, String, DataType, Seq[Expression], Seq[AbstractDataType], Boolean, Boolean)]", "member" : "org.apache.spark.sql.shim.Invoke7.unapply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.Invoke):Option[(org.apache.spark.sql.catalyst.expressions.Expression,String,org.apache.spark.sql.types.DataType,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean,Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(targetObject: Expression, functionName: String, dataType: DataType, arguments: Seq[Expression], methodInputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean): Expression", "member" : "org.apache.spark.sql.shim.Invoke7.apply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#apply(targetObject:org.apache.spark.sql.catalyst.expressions.Expression,functionName:String,dataType:org.apache.spark.sql.types.DataType,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],methodInputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke7$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.Invoke8", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Invoke): Option[(Expression, String, DataType, Seq[Expression], Seq[AbstractDataType], Boolean, Boolean, Boolean)]", "member" : "org.apache.spark.sql.shim.Invoke8.unapply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.Invoke):Option[(org.apache.spark.sql.catalyst.expressions.Expression,String,org.apache.spark.sql.types.DataType,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean,Boolean,Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(targetObject: Expression, functionName: String, dataType: DataType, arguments: Seq[Expression], methodInputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean, isDeterministic: Boolean): Expression", "member" : "org.apache.spark.sql.shim.Invoke8.apply", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#apply(targetObject:org.apache.spark.sql.catalyst.expressions.Expression,functionName:String,dataType:org.apache.spark.sql.types.DataType,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],methodInputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean,isDeterministic:Boolean):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/Invoke8$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.NewInstance4", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: NewInstance): Option[(Class[_], Seq[Expression], DataType, Boolean)]", "member" : "org.apache.spark.sql.shim.NewInstance4.unapply", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.NewInstance):Option[(Class[_],Seq[org.apache.spark.sql.catalyst.expressions.Expression],org.apache.spark.sql.types.DataType,Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(cls: Class[_], arguments: Seq[Expression], dataType: DataType, propagateNull: Boolean): NewInstance", "member" : "org.apache.spark.sql.shim.NewInstance4.apply", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#apply(cls:Class[_],arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],dataType:org.apache.spark.sql.types.DataType,propagateNull:Boolean):org.apache.spark.sql.catalyst.expressions.objects.NewInstance", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.NewInstance5", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: NewInstance): Option[(Class[_], Seq[Expression], DataType, Boolean, Option[() ⇒ AnyRef])]", "member" : "org.apache.spark.sql.shim.NewInstance5.unapply", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.NewInstance):Option[(Class[_],Seq[org.apache.spark.sql.catalyst.expressions.Expression],org.apache.spark.sql.types.DataType,Boolean,Option[()=>AnyRef])]", "kind" : "def"}, {"label" : "apply", "tail" : "(cls: Class[_], arguments: Seq[Expression], dataType: DataType, propagateNull: Boolean, outerPointer: Option[() ⇒ AnyRef]): NewInstance", "member" : "org.apache.spark.sql.shim.NewInstance5.apply", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#apply(cls:Class[_],arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],dataType:org.apache.spark.sql.types.DataType,propagateNull:Boolean,outerPointer:Option[()=>AnyRef]):org.apache.spark.sql.catalyst.expressions.objects.NewInstance", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.NewInstance6", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: NewInstance): Option[(Class[_], Seq[Expression], Seq[AbstractDataType], Boolean, DataType, Option[() ⇒ AnyRef])]", "member" : "org.apache.spark.sql.shim.NewInstance6.unapply", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.NewInstance):Option[(Class[_],Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean,org.apache.spark.sql.types.DataType,Option[()=>AnyRef])]", "kind" : "def"}, {"label" : "apply", "tail" : "(cls: Class[_], arguments: Seq[Expression], inputTypes: Seq[AbstractDataType], propagateNull: Boolean, dataType: DataType, outerPointer: Option[() ⇒ AnyRef]): Expression", "member" : "org.apache.spark.sql.shim.NewInstance6.apply", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#apply(cls:Class[_],arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,dataType:org.apache.spark.sql.types.DataType,outerPointer:Option[()=>AnyRef]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/NewInstance6$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.StaticInvoke4", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html", "members_object" : [{"label" : "unapply", "tail" : "(exp: Expression): Option[(Class[_], DataType, String, Seq[Expression])]", "member" : "org.apache.spark.sql.shim.StaticInvoke4.unapply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#unapply(exp:org.apache.spark.sql.catalyst.expressions.Expression):Option[(Class[_],org.apache.spark.sql.types.DataType,String,Seq[org.apache.spark.sql.catalyst.expressions.Expression])]", "kind" : "def"}, {"label" : "apply", "tail" : "(staticObject: Class[_], dataType: DataType, functionName: String, arguments: Seq[Expression], inputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean, isDeterministic: Boolean): StaticInvoke", "member" : "org.apache.spark.sql.shim.StaticInvoke4.apply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#apply(staticObject:Class[_],dataType:org.apache.spark.sql.types.DataType,functionName:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean,isDeterministic:Boolean):org.apache.spark.sql.catalyst.expressions.objects.StaticInvoke", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.StaticInvoke5", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html", "members_object" : [{"label" : "unapply", "tail" : "(exp: Expression): Option[(Class[_], DataType, String, Seq[Expression], Seq[AbstractDataType])]", "member" : "org.apache.spark.sql.shim.StaticInvoke5.unapply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#unapply(exp:org.apache.spark.sql.catalyst.expressions.Expression):Option[(Class[_],org.apache.spark.sql.types.DataType,String,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType])]", "kind" : "def"}, {"label" : "apply", "tail" : "(staticObject: Class[_], dataType: DataType, functionName: String, arguments: Seq[Expression], inputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean, isDeterministic: Boolean): StaticInvoke", "member" : "org.apache.spark.sql.shim.StaticInvoke5.apply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#apply(staticObject:Class[_],dataType:org.apache.spark.sql.types.DataType,functionName:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean,isDeterministic:Boolean):org.apache.spark.sql.catalyst.expressions.objects.StaticInvoke", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.StaticInvoke6", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html", "members_object" : [{"label" : "unapply", "tail" : "(exp: Expression): Option[(Class[_], DataType, String, Seq[Expression], Seq[AbstractDataType], Boolean)]", "member" : "org.apache.spark.sql.shim.StaticInvoke6.unapply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#unapply(exp:org.apache.spark.sql.catalyst.expressions.Expression):Option[(Class[_],org.apache.spark.sql.types.DataType,String,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(staticObject: Class[_], dataType: DataType, functionName: String, arguments: Seq[Expression], inputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean, isDeterministic: Boolean): StaticInvoke", "member" : "org.apache.spark.sql.shim.StaticInvoke6.apply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#apply(staticObject:Class[_],dataType:org.apache.spark.sql.types.DataType,functionName:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean,isDeterministic:Boolean):org.apache.spark.sql.catalyst.expressions.objects.StaticInvoke", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke6$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.StaticInvoke7", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html", "members_object" : [{"label" : "unapply", "tail" : "(exp: Expression): Option[(Class[_], DataType, String, Seq[Expression], Seq[AbstractDataType], Boolean, Boolean)]", "member" : "org.apache.spark.sql.shim.StaticInvoke7.unapply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#unapply(exp:org.apache.spark.sql.catalyst.expressions.Expression):Option[(Class[_],org.apache.spark.sql.types.DataType,String,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean,Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(staticObject: Class[_], dataType: DataType, functionName: String, arguments: Seq[Expression], inputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean, isDeterministic: Boolean): StaticInvoke", "member" : "org.apache.spark.sql.shim.StaticInvoke7.apply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#apply(staticObject:Class[_],dataType:org.apache.spark.sql.types.DataType,functionName:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean,isDeterministic:Boolean):org.apache.spark.sql.catalyst.expressions.objects.StaticInvoke", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke7$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.StaticInvoke8", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html", "members_object" : [{"label" : "unapply", "tail" : "(exp: Expression): Option[(Class[_], DataType, String, Seq[Expression], Seq[AbstractDataType], Boolean, Boolean, Boolean)]", "member" : "org.apache.spark.sql.shim.StaticInvoke8.unapply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#unapply(exp:org.apache.spark.sql.catalyst.expressions.Expression):Option[(Class[_],org.apache.spark.sql.types.DataType,String,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Seq[org.apache.spark.sql.types.AbstractDataType],Boolean,Boolean,Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(staticObject: Class[_], dataType: DataType, functionName: String, arguments: Seq[Expression], inputTypes: Seq[AbstractDataType], propagateNull: Boolean, returnNullable: Boolean, isDeterministic: Boolean): StaticInvoke", "member" : "org.apache.spark.sql.shim.StaticInvoke8.apply", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#apply(staticObject:Class[_],dataType:org.apache.spark.sql.types.DataType,functionName:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType],propagateNull:Boolean,returnNullable:Boolean,isDeterministic:Boolean):org.apache.spark.sql.catalyst.expressions.objects.StaticInvoke", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/StaticInvoke8$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.UnresolvedNamedLambdaVariableT", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html", "members_object" : [{"label" : "freshVarName", "tail" : "(name: String): String", "member" : "org.apache.spark.sql.shim.UnresolvedNamedLambdaVariableT.freshVarName", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#freshVarName(name:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/UnresolvedNamedLambdaVariableT$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.shim.utils", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/shim\/utils$.html", "members_object" : [{"label" : "matrixUdt", "tail" : ": MatrixUDT", "member" : "org.apache.spark.sql.shim.utils.matrixUdt", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#matrixUdt:org.apache.spark.ml.linalg.MatrixUDT", "kind" : "val"}, {"label" : "vectorUdt", "tail" : ": VectorUDT", "member" : "org.apache.spark.sql.shim.utils.vectorUdt", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#vectorUdt:org.apache.spark.ml.linalg.VectorUDT", "kind" : "val"}, {"label" : "ofRows", "tail" : "(sparkSession: SparkSession, logicalPlan: LogicalPlan): DataFrame", "member" : "org.apache.spark.sql.shim.utils.ofRows", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#ofRows(sparkSession:org.apache.spark.sql.SparkSession,logicalPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "logicalPlan", "tail" : "(ds: Dataset[_]): LogicalPlan", "member" : "org.apache.spark.sql.shim.utils.logicalPlan", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#logicalPlan(ds:org.apache.spark.sql.Dataset[_]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "createLambda", "tail" : "(f: (Column, Column, Column) ⇒ Column): LambdaFunction", "member" : "org.apache.spark.sql.shim.utils.createLambda", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#createLambda(f:(org.apache.spark.sql.Column,org.apache.spark.sql.Column,org.apache.spark.sql.Column)=>org.apache.spark.sql.Column):org.apache.spark.sql.catalyst.expressions.LambdaFunction", "kind" : "def"}, {"label" : "createLambda", "tail" : "(f: (Column, Column) ⇒ Column): LambdaFunction", "member" : "org.apache.spark.sql.shim.utils.createLambda", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#createLambda(f:(org.apache.spark.sql.Column,org.apache.spark.sql.Column)=>org.apache.spark.sql.Column):org.apache.spark.sql.catalyst.expressions.LambdaFunction", "kind" : "def"}, {"label" : "createLambda", "tail" : "(f: (Column) ⇒ Column): LambdaFunction", "member" : "org.apache.spark.sql.shim.utils.createLambda", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#createLambda(f:org.apache.spark.sql.Column=>org.apache.spark.sql.Column):org.apache.spark.sql.catalyst.expressions.LambdaFunction", "kind" : "def"}, {"label" : "named", "tail" : "(col: Column): NamedExpression", "member" : "org.apache.spark.sql.shim.utils.named", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#named(col:org.apache.spark.sql.Column):org.apache.spark.sql.catalyst.expressions.NamedExpression", "kind" : "def"}, {"label" : "toString", "tail" : "(dataFrame: DataFrame, showParams: ShowParams): String", "member" : "org.apache.spark.sql.shim.utils.toString", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#toString(dataFrame:org.apache.spark.sql.DataFrame,showParams:com.sparkutils.shim.ShowParams):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/utils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.sql.shim.expressions" : [{"name" : "org.apache.spark.sql.shim.expressions.InputTypeChecks", "members_trait" : [{"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.shim.expressions.InputTypeChecks.inputTypes", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "org.apache.spark.sql.shim.expressions.InputTypeChecks.inputDataTypes", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.eval", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.nullable", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#nullable:Boolean", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "Provides a simpler wrapper around types", "trait" : "org\/apache\/spark\/sql\/shim\/expressions\/InputTypeChecks.html", "kind" : "trait"}], "com.sparkutils.shim" : [{"name" : "com.sparkutils.shim.ShowParams", "shortDescription" : "Paramters to pass into showString for debugging \/ validation", "members_case class" : [{"member" : "com.sparkutils.shim.ShowParams#<init>", "error" : "unsupported entity"}, {"label" : "vertical", "tail" : ": Boolean", "member" : "com.sparkutils.shim.ShowParams.vertical", "link" : "com\/sparkutils\/shim\/ShowParams.html#vertical:Boolean", "kind" : "val"}, {"label" : "truncate", "tail" : ": Int", "member" : "com.sparkutils.shim.ShowParams.truncate", "link" : "com\/sparkutils\/shim\/ShowParams.html#truncate:Int", "kind" : "val"}, {"label" : "numRows", "tail" : ": Int", "member" : "com.sparkutils.shim.ShowParams.numRows", "link" : "com\/sparkutils\/shim\/ShowParams.html#numRows:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/ShowParams.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/ShowParams.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/ShowParams.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/ShowParams.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/ShowParams.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/ShowParams.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/ShowParams.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/ShowParams.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/ShowParams.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/ShowParams.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/ShowParams.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/ShowParams.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/ShowParams.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/ShowParams.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/ShowParams.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/ShowParams.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/shim\/ShowParams.html", "kind" : "case class"}], "org.apache.spark.sql" : [{"name" : "org.apache.spark.sql.ShimUtils", "shortDescription" : "Set of utilities to reach in to private functions", "object" : "org\/apache\/spark\/sql\/ShimUtils$.html", "members_object" : [{"label" : "analysisException", "tail" : "(ds: Dataset[_], colNames: Seq[String]): AnalysisException", "member" : "org.apache.spark.sql.ShimUtils.analysisException", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#analysisException(ds:org.apache.spark.sql.Dataset[_],colNames:Seq[String]):org.apache.spark.sql.AnalysisException", "kind" : "def"}, {"label" : "expressionEncoder", "tail" : "(jvmRepr: DataType, nullable: Boolean, toCatalyst: (Expression) ⇒ Expression, catalystRepr: DataType, fromCatalyst: (Expression) ⇒ Expression)(arg0: ClassTag[T]): Encoder[T]", "member" : "org.apache.spark.sql.ShimUtils.expressionEncoder", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#expressionEncoder[T](jvmRepr:org.apache.spark.sql.types.DataType,nullable:Boolean,toCatalyst:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression,catalystRepr:org.apache.spark.sql.types.DataType,fromCatalyst:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression)(implicitevidence$1:scala.reflect.ClassTag[T]):org.apache.spark.sql.Encoder[T]", "kind" : "def"}, {"label" : "targetStructType", "tail" : "(dataType: DataType, nullable: Boolean): StructType", "member" : "org.apache.spark.sql.ShimUtils.targetStructType", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#targetStructType(dataType:org.apache.spark.sql.types.DataType,nullable:Boolean):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "rowEncoder", "tail" : "(structType: StructType): ExpressionEncoder[Row]", "member" : "org.apache.spark.sql.ShimUtils.rowEncoder", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#rowEncoder(structType:org.apache.spark.sql.types.StructType):org.apache.spark.sql.catalyst.encoders.ExpressionEncoder[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "tableOrViewNotFound", "tail" : "(e: Exception): Option[Either[Exception, Set[String]]]", "member" : "org.apache.spark.sql.ShimUtils.tableOrViewNotFound", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#tableOrViewNotFound(e:Exception):Option[Either[Exception,Set[String]]]", "kind" : "def"}, {"label" : "sparkOrdering", "tail" : "(dataType: DataType): Ordering[_]", "member" : "org.apache.spark.sql.ShimUtils.sparkOrdering", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#sparkOrdering(dataType:org.apache.spark.sql.types.DataType):Ordering[_]", "kind" : "def"}, {"label" : "toSQLValue", "tail" : "(v: Any, t: DataType): String", "member" : "org.apache.spark.sql.ShimUtils.toSQLValue", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#toSQLValue(v:Any,t:org.apache.spark.sql.types.DataType):String", "kind" : "def"}, {"label" : "toPrettySQL", "tail" : "(e: Expression): String", "member" : "org.apache.spark.sql.ShimUtils.toPrettySQL", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#toPrettySQL(e:org.apache.spark.sql.catalyst.expressions.Expression):String", "kind" : "def"}, {"label" : "usePrettyExpression", "tail" : "(e: Expression): Expression", "member" : "org.apache.spark.sql.ShimUtils.usePrettyExpression", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#usePrettyExpression(e:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "toSQLExpr", "tail" : "(e: Expression): String", "member" : "org.apache.spark.sql.ShimUtils.toSQLExpr", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#toSQLExpr(e:org.apache.spark.sql.catalyst.expressions.Expression):String", "kind" : "def"}, {"label" : "toSQLType", "tail" : "(t: AbstractDataType): String", "member" : "org.apache.spark.sql.ShimUtils.toSQLType", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#toSQLType(t:org.apache.spark.sql.types.AbstractDataType):String", "kind" : "def"}, {"label" : "mismatch", "tail" : "(errorSubClass: String, messageParameters: Map[String, String]): TypeCheckResult", "member" : "org.apache.spark.sql.ShimUtils.mismatch", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#mismatch(errorSubClass:String,messageParameters:Map[String,String]):org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "registerFunctionViaBuiltin", "tail" : "(name: String, builder: (Seq[Expression]) ⇒ Expression): Unit", "member" : "org.apache.spark.sql.ShimUtils.registerFunctionViaBuiltin", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#registerFunctionViaBuiltin(name:String,builder:Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>org.apache.spark.sql.catalyst.expressions.Expression):Unit", "kind" : "def"}, {"label" : "registerFunctionViaExtension", "tail" : "(extensions: SparkSessionExtensions)(name: String, builder: (Seq[Expression]) ⇒ Expression): Unit", "member" : "org.apache.spark.sql.ShimUtils.registerFunctionViaExtension", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#registerFunctionViaExtension(extensions:org.apache.spark.sql.SparkSessionExtensions)(name:String,builder:Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>org.apache.spark.sql.catalyst.expressions.Expression):Unit", "kind" : "def"}, {"label" : "registerFunction", "tail" : "(funcReg: FunctionRegistry)(name: String, builder: (Seq[Expression]) ⇒ Expression): Unit", "member" : "org.apache.spark.sql.ShimUtils.registerFunction", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#registerFunction(funcReg:org.apache.spark.sql.catalyst.analysis.FunctionRegistry)(name:String,builder:Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>org.apache.spark.sql.catalyst.expressions.Expression):Unit", "kind" : "def"}, {"label" : "newParser", "tail" : "(): SparkSqlParser", "member" : "org.apache.spark.sql.ShimUtils.newParser", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#newParser():org.apache.spark.sql.execution.SparkSqlParser", "kind" : "def"}, {"label" : "hashCalendarInterval", "tail" : "(c: CalendarInterval, hashlongs: InterpretedHashLongsFunction, digest: Digest): Digest", "member" : "org.apache.spark.sql.ShimUtils.hashCalendarInterval", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#hashCalendarInterval(c:org.apache.spark.unsafe.types.CalendarInterval,hashlongs:org.apache.spark.sql.shim.hash.InterpretedHashLongsFunction,digest:org.apache.spark.sql.shim.hash.Digest):org.apache.spark.sql.shim.hash.Digest", "kind" : "def"}, {"label" : "cast", "tail" : "(child: Expression, dataType: DataType): Expression", "member" : "org.apache.spark.sql.ShimUtils.cast", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#cast(child:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "add", "tail" : "(left: Expression, right: Expression, dataType: DataType): Expression", "member" : "org.apache.spark.sql.ShimUtils.add", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#add(left:org.apache.spark.sql.catalyst.expressions.Expression,right:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "arguments", "tail" : "(unresolvedFunction: UnresolvedFunction): Seq[Expression]", "member" : "org.apache.spark.sql.ShimUtils.arguments", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#arguments(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "isPrimitive", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.ShimUtils.isPrimitive", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#isPrimitive(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "UnresolvedFunctionOps", "tail" : "", "member" : "org.apache.spark.sql.ShimUtils.UnresolvedFunctionOps", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#UnresolvedFunctionOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/ShimUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org" : [], "com" : [], "com.sparkutils.shim.expressions" : [{"name" : "com.sparkutils.shim.expressions.Alias2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Alias2$.html", "members_object" : [{"label" : "unapply", "tail" : "(alias: Alias): Option[(Expression, String)]", "member" : "com.sparkutils.shim.expressions.Alias2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#unapply(alias:org.apache.spark.sql.catalyst.expressions.Alias):Option[(org.apache.spark.sql.catalyst.expressions.Expression,String)]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression, name: String)(exprId: ExprId, qualifier: Seq[String], explicitMetadata: Option[Metadata], nonInheritableMetadataKeys: Seq[String]): Alias", "member" : "com.sparkutils.shim.expressions.Alias2.apply", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression,name:String)(exprId:org.apache.spark.sql.catalyst.expressions.ExprId,qualifier:Seq[String],explicitMetadata:Option[org.apache.spark.sql.types.Metadata],nonInheritableMetadataKeys:Seq[String]):org.apache.spark.sql.catalyst.expressions.Alias", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Alias2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.And2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/And2$.html", "members_object" : [{"label" : "unapply", "tail" : "(and: And): Option[(Expression, Expression)]", "member" : "com.sparkutils.shim.expressions.And2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#unapply(and:org.apache.spark.sql.catalyst.expressions.And):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "def"}, {"label" : "apply", "tail" : "(left: Expression, right: Expression): And", "member" : "com.sparkutils.shim.expressions.And2.apply", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#apply(left:org.apache.spark.sql.catalyst.expressions.Expression,right:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.And", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/And2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Cast2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Cast2$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Cast): Option[(Expression, DataType)]", "member" : "com.sparkutils.shim.expressions.Cast2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.Cast):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.types.DataType)]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression, dataType: DataType): Expression", "member" : "com.sparkutils.shim.expressions.Cast2.apply", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Cast2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Cast3", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Cast3$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Cast): Option[(Expression, DataType, Option[String])]", "member" : "com.sparkutils.shim.expressions.Cast3.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.Cast):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.types.DataType,Option[String])]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression, dataType: DataType, timeZoneId: Option[String]): Expression", "member" : "com.sparkutils.shim.expressions.Cast3.apply", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType,timeZoneId:Option[String]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Cast3$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Cast4", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Cast4$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: Cast): Option[(Expression, DataType, Option[String], org.apache.spark.sql.catalyst.expressions.EvalMode.Value)]", "member" : "com.sparkutils.shim.expressions.Cast4.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.Cast):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.types.DataType,Option[String],org.apache.spark.sql.catalyst.expressions.EvalMode.Value)]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression, dataType: DataType, timeZoneId: Option[String], evalMode: org.apache.spark.sql.catalyst.expressions.EvalMode.Value): Expression", "member" : "com.sparkutils.shim.expressions.Cast4.apply", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType,timeZoneId:Option[String],evalMode:org.apache.spark.sql.catalyst.expressions.EvalMode.Value):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Cast4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Coalesce1", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html", "members_object" : [{"label" : "unapply", "tail" : "(coalesce: Coalesce): Option[Seq[Expression]]", "member" : "com.sparkutils.shim.expressions.Coalesce1.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#unapply(coalesce:org.apache.spark.sql.catalyst.expressions.Coalesce):Option[Seq[org.apache.spark.sql.catalyst.expressions.Expression]]", "kind" : "def"}, {"label" : "apply", "tail" : "(seq: Seq[Expression]): Coalesce", "member" : "com.sparkutils.shim.expressions.Coalesce1.apply", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#apply(seq:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Coalesce", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Coalesce1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.CreateNamedStruct1", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: CreateNamedStruct): Option[Seq[Expression]]", "member" : "com.sparkutils.shim.expressions.CreateNamedStruct1.unapply", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.CreateNamedStruct):Option[Seq[org.apache.spark.sql.catalyst.expressions.Expression]]", "kind" : "def"}, {"label" : "apply", "tail" : "(children: Seq[Expression]): CreateNamedStruct", "member" : "com.sparkutils.shim.expressions.CreateNamedStruct1.apply", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#apply(children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.CreateNamedStruct", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/CreateNamedStruct1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.CreateStruct1", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html", "members_object" : [{"label" : "apply", "tail" : "(children: Seq[Expression]): CreateNamedStruct", "member" : "com.sparkutils.shim.expressions.CreateStruct1.apply", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#apply(children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.CreateNamedStruct", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/CreateStruct1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.EqualNullSafe2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html", "members_object" : [{"label" : "unapply", "tail" : "(equalNullSafe: EqualNullSafe): Option[(Expression, Expression)]", "member" : "com.sparkutils.shim.expressions.EqualNullSafe2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#unapply(equalNullSafe:org.apache.spark.sql.catalyst.expressions.EqualNullSafe):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "def"}, {"label" : "apply", "tail" : "(left: Expression, right: Expression): EqualNullSafe", "member" : "com.sparkutils.shim.expressions.EqualNullSafe2.apply", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#apply(left:org.apache.spark.sql.catalyst.expressions.Expression,right:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.EqualNullSafe", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/EqualNullSafe2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.EqualTo2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html", "members_object" : [{"label" : "unapply", "tail" : "(equalTo: EqualTo): Option[(Expression, Expression)]", "member" : "com.sparkutils.shim.expressions.EqualTo2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#unapply(equalTo:org.apache.spark.sql.catalyst.expressions.EqualTo):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "def"}, {"label" : "apply", "tail" : "(left: Expression, right: Expression): EqualTo", "member" : "com.sparkutils.shim.expressions.EqualTo2.apply", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#apply(left:org.apache.spark.sql.catalyst.expressions.Expression,right:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.EqualTo", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/EqualTo2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.ExternalMapToCatalyst7", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html", "members_object" : [{"label" : "apply", "tail" : "(inputMap: Expression, keyType: DataType, keyConverter: (Expression) ⇒ Expression, keyNullable: Boolean, valueType: DataType, valueConverter: (Expression) ⇒ Expression, valueNullable: Boolean): ExternalMapToCatalyst", "member" : "com.sparkutils.shim.expressions.ExternalMapToCatalyst7.apply", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#apply(inputMap:org.apache.spark.sql.catalyst.expressions.Expression,keyType:org.apache.spark.sql.types.DataType,keyConverter:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression,keyNullable:Boolean,valueType:org.apache.spark.sql.types.DataType,valueConverter:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression,valueNullable:Boolean):org.apache.spark.sql.catalyst.expressions.objects.ExternalMapToCatalyst", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/ExternalMapToCatalyst7$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.FoldableUnevaluable", "members_trait" : [{"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#foldable:Boolean", "kind" : "final def"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.nullable", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#nullable:Boolean", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "2.4 and 3.0 version doesn't have foldable as false so the optimiser tries to fold, we need Unevaluable for 14.4", "trait" : "com\/sparkutils\/shim\/expressions\/FoldableUnevaluable.html", "kind" : "trait"}, {"name" : "com.sparkutils.shim.expressions.functions", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/functions$.html", "members_object" : [{"label" : "bitwiseNOT", "tail" : "(e: Column): Column", "member" : "com.sparkutils.shim.expressions.functions.bitwiseNOT", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#bitwiseNOT(e:org.apache.spark.sql.Column):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "shiftLeft", "tail" : "(e: Column, numBits: Int): Column", "member" : "com.sparkutils.shim.expressions.functions.shiftLeft", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#shiftLeft(e:org.apache.spark.sql.Column,numBits:Int):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "shiftRight", "tail" : "(e: Column, numBits: Int): Column", "member" : "com.sparkutils.shim.expressions.functions.shiftRight", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#shiftRight(e:org.apache.spark.sql.Column,numBits:Int):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "shiftRightUnsigned", "tail" : "(e: Column, numBits: Int): Column", "member" : "com.sparkutils.shim.expressions.functions.shiftRightUnsigned", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#shiftRightUnsigned(e:org.apache.spark.sql.Column,numBits:Int):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "sumDistinct", "tail" : "(e: Column): Column", "member" : "com.sparkutils.shim.expressions.functions.sumDistinct", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#sumDistinct(e:org.apache.spark.sql.Column):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/functions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.GetStructField3", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: GetStructField): Option[(Expression, Int, Option[String])]", "member" : "com.sparkutils.shim.expressions.GetStructField3.unapply", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.GetStructField):Option[(org.apache.spark.sql.catalyst.expressions.Expression,Int,Option[String])]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression, ordinal: Int, name: Option[String]): GetStructField", "member" : "com.sparkutils.shim.expressions.GetStructField3.apply", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression,ordinal:Int,name:Option[String]):org.apache.spark.sql.catalyst.expressions.GetStructField", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/GetStructField3$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.HigherOrderFunctionLike", "members_trait" : [{"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.canonicalized", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "functionsForEval", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functionsForEval", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#functionsForEval:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "bind", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ LambdaFunction): HigherOrderFunction", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.bind", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#bind(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "final def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.resolved", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.inputTypes", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkArgumentDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.checkArgumentDataTypes", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#checkArgumentDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "argumentsResolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.argumentsResolved", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#argumentsResolved:Boolean", "kind" : "lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nodePatterns", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nullable", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#nullable:Boolean", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bindInternal", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ LambdaFunction): HigherOrderFunction", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.bindInternal", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#bindInternal(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "abstract def"}, {"label" : "functionTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functionTypes", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#functionTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "abstract def"}, {"label" : "functions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functions", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#functions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "abstract def"}, {"label" : "argumentTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.argumentTypes", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#argumentTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "abstract def"}, {"label" : "arguments", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.arguments", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.eval", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/shim\/expressions\/HigherOrderFunctionLike.html", "kind" : "trait"}, {"name" : "com.sparkutils.shim.expressions.IsNotNull1", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html", "members_object" : [{"label" : "unapply", "tail" : "(isNotNull: IsNotNull): Option[Expression]", "member" : "com.sparkutils.shim.expressions.IsNotNull1.unapply", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#unapply(isNotNull:org.apache.spark.sql.catalyst.expressions.IsNotNull):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression): IsNotNull", "member" : "com.sparkutils.shim.expressions.IsNotNull1.apply", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.IsNotNull", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/IsNotNull1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.IsNull1", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html", "members_object" : [{"label" : "unapply", "tail" : "(isNull: IsNull): Option[Expression]", "member" : "com.sparkutils.shim.expressions.IsNull1.unapply", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#unapply(isNull:org.apache.spark.sql.catalyst.expressions.IsNull):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression): IsNull", "member" : "com.sparkutils.shim.expressions.IsNull1.apply", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.IsNull", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/IsNull1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.MapGroups4", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html", "members_object" : [{"label" : "apply", "tail" : "(func: (K, Iterator[T]) ⇒ TraversableOnce[U], groupingAttributes: Seq[Attribute], dataAttributes: Seq[Attribute], child: LogicalPlan)(arg0: Encoder[K], arg1: Encoder[T], arg2: Encoder[U]): LogicalPlan", "member" : "com.sparkutils.shim.expressions.MapGroups4.apply", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#apply[K,T,U](func:(K,Iterator[T])=>TraversableOnce[U],groupingAttributes:Seq[org.apache.spark.sql.catalyst.expressions.Attribute],dataAttributes:Seq[org.apache.spark.sql.catalyst.expressions.Attribute],child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan)(implicitevidence$1:org.apache.spark.sql.Encoder[K],implicitevidence$2:org.apache.spark.sql.Encoder[T],implicitevidence$3:org.apache.spark.sql.Encoder[U]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.MapGroups5", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html", "members_object" : [{"label" : "apply", "tail" : "(func: (K, Iterator[T]) ⇒ TraversableOnce[U], groupingAttributes: Seq[Attribute], dataAttributes: Seq[Attribute], dataOrder: Seq[SortOrder], child: LogicalPlan)(arg0: Encoder[K], arg1: Encoder[T], arg2: Encoder[U]): LogicalPlan", "member" : "com.sparkutils.shim.expressions.MapGroups5.apply", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#apply[K,T,U](func:(K,Iterator[T])=>TraversableOnce[U],groupingAttributes:Seq[org.apache.spark.sql.catalyst.expressions.Attribute],dataAttributes:Seq[org.apache.spark.sql.catalyst.expressions.Attribute],dataOrder:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder],child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan)(implicitevidence$4:org.apache.spark.sql.Encoder[K],implicitevidence$5:org.apache.spark.sql.Encoder[T],implicitevidence$6:org.apache.spark.sql.Encoder[U]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/MapGroups5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.MapObjects5", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html", "members_object" : [{"label" : "apply", "tail" : "(function: (Expression) ⇒ Expression, inputData: Expression, elementType: DataType, elementNullable: Boolean, customCollectionCls: Option[Class[_]]): MapObjects", "member" : "com.sparkutils.shim.expressions.MapObjects5.apply", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#apply(function:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression,inputData:org.apache.spark.sql.catalyst.expressions.Expression,elementType:org.apache.spark.sql.types.DataType,elementNullable:Boolean,customCollectionCls:Option[Class[_]]):org.apache.spark.sql.catalyst.expressions.objects.MapObjects", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/MapObjects5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Names", "shortDescription" : "Hides differences in name usage", "object" : "com\/sparkutils\/shim\/expressions\/Names$.html", "members_object" : [{"label" : "toName", "tail" : "(unresolvedFunction: UnresolvedFunction): String", "member" : "com.sparkutils.shim.expressions.Names.toName", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#toName(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):String", "kind" : "def"}, {"label" : "toName", "tail" : "(parts: Seq[String]): String", "member" : "com.sparkutils.shim.expressions.Names.toName", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#toName(parts:Seq[String]):String", "kind" : "def"}, {"label" : "toName", "tail" : "(nv: UnresolvedNamedLambdaVariable): String", "member" : "com.sparkutils.shim.expressions.Names.toName", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#toName(nv:org.apache.spark.sql.catalyst.expressions.UnresolvedNamedLambdaVariable):String", "kind" : "def"}, {"label" : "toName", "tail" : "(ne: NamedExpression): String", "member" : "com.sparkutils.shim.expressions.Names.toName", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#toName(ne:org.apache.spark.sql.catalyst.expressions.NamedExpression):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Names$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Not1", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Not1$.html", "members_object" : [{"label" : "unapply", "tail" : "(not: Not): Option[Expression]", "member" : "com.sparkutils.shim.expressions.Not1.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#unapply(not:org.apache.spark.sql.catalyst.expressions.Not):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression): Not", "member" : "com.sparkutils.shim.expressions.Not1.apply", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Not", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Not1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.Or2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/Or2$.html", "members_object" : [{"label" : "unapply", "tail" : "(or: Or): Option[(Expression, Expression)]", "member" : "com.sparkutils.shim.expressions.Or2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#unapply(or:org.apache.spark.sql.catalyst.expressions.Or):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "def"}, {"label" : "apply", "tail" : "(left: Expression, right: Expression): Or", "member" : "com.sparkutils.shim.expressions.Or2.apply", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#apply(left:org.apache.spark.sql.catalyst.expressions.Expression,right:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Or", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/Or2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.PredicateHelperPlus", "members_trait" : [{"label" : "findRootExpression", "tail" : "(expr: Expression, topPlan: LogicalPlan): Option[Expression]", "member" : "com.sparkutils.shim.expressions.PredicateHelperPlus.findRootExpression", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#findRootExpression(expr:org.apache.spark.sql.catalyst.expressions.Expression,topPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "isLikelySelective", "tail" : "(e: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.isLikelySelective", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#isLikelySelective(e:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "def"}, {"label" : "outputWithNullability", "tail" : "(output: Seq[Attribute], nonNullAttrExprIds: Seq[ExprId]): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.outputWithNullability", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#outputWithNullability(output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute],nonNullAttrExprIds:Seq[org.apache.spark.sql.catalyst.expressions.ExprId]):Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "isNullIntolerant", "tail" : "(expr: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.isNullIntolerant", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#isNullIntolerant(expr:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "def"}, {"label" : "extractPredicatesWithinOutputSet", "tail" : "(condition: Expression, outputSet: AttributeSet): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.extractPredicatesWithinOutputSet", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#extractPredicatesWithinOutputSet(condition:org.apache.spark.sql.catalyst.expressions.Expression,outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "canEvaluateWithinJoin", "tail" : "(expr: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.canEvaluateWithinJoin", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#canEvaluateWithinJoin(expr:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "def"}, {"label" : "canEvaluate", "tail" : "(expr: Expression, plan: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.canEvaluate", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#canEvaluate(expr:org.apache.spark.sql.catalyst.expressions.Expression,plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "buildBalancedPredicate", "tail" : "(expressions: Seq[Expression], op: (Expression, Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.buildBalancedPredicate", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#buildBalancedPredicate(expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression],op:(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "splitDisjunctivePredicates", "tail" : "(condition: Expression): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.splitDisjunctivePredicates", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#splitDisjunctivePredicates(condition:org.apache.spark.sql.catalyst.expressions.Expression):Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "findExpressionAndTrackLineageDown", "tail" : "(exp: Expression, plan: LogicalPlan): Option[(Expression, LogicalPlan)]", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.findExpressionAndTrackLineageDown", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#findExpressionAndTrackLineageDown(exp:org.apache.spark.sql.catalyst.expressions.Expression,plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan)]", "kind" : "def"}, {"label" : "splitConjunctivePredicates", "tail" : "(condition: Expression): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.PredicateHelper.splitConjunctivePredicates", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#splitConjunctivePredicates(condition:org.apache.spark.sql.catalyst.expressions.Expression):Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#logName:String", "kind" : "def"}, {"label" : "trimNonTopLevelAliases", "tail" : "(e: T): T", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.trimNonTopLevelAliases", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#trimNonTopLevelAliases[T<:org.apache.spark.sql.catalyst.expressions.Expression](e:T):T", "kind" : "def"}, {"label" : "trimAliases", "tail" : "(e: Expression): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.trimAliases", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#trimAliases(e:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "replaceAliasButKeepName", "tail" : "(expr: NamedExpression, aliasMap: AttributeMap[Alias]): NamedExpression", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.replaceAliasButKeepName", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#replaceAliasButKeepName(expr:org.apache.spark.sql.catalyst.expressions.NamedExpression,aliasMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Alias]):org.apache.spark.sql.catalyst.expressions.NamedExpression", "kind" : "def"}, {"label" : "replaceAlias", "tail" : "(expr: Expression, aliasMap: AttributeMap[Alias]): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.replaceAlias", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#replaceAlias(expr:org.apache.spark.sql.catalyst.expressions.Expression,aliasMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Alias]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "getAliasMap", "tail" : "(exprs: Seq[NamedExpression]): AttributeMap[Alias]", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.getAliasMap", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#getAliasMap(exprs:Seq[org.apache.spark.sql.catalyst.expressions.NamedExpression]):org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Alias]", "kind" : "def"}, {"label" : "getAliasMap", "tail" : "(plan: Aggregate): AttributeMap[Alias]", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.getAliasMap", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#getAliasMap(plan:org.apache.spark.sql.catalyst.plans.logical.Aggregate):org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Alias]", "kind" : "def"}, {"label" : "getAliasMap", "tail" : "(plan: Project): AttributeMap[Alias]", "member" : "org.apache.spark.sql.catalyst.expressions.AliasHelper.getAliasMap", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#getAliasMap(plan:org.apache.spark.sql.catalyst.plans.logical.Project):org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Alias]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Wraps PredicateHelper, 2.4 doesn't have the findExpression function and it's needed for joins on 3.3", "trait" : "com\/sparkutils\/shim\/expressions\/PredicateHelperPlus.html", "kind" : "trait"}, {"name" : "com.sparkutils.shim.expressions.StatefulLike", "members_trait" : [{"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "freshCopy", "tail" : "(): StatefulLike", "member" : "com.sparkutils.shim.expressions.StatefulLike.freshCopy", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#freshCopy():com.sparkutils.shim.expressions.StatefulLike", "kind" : "abstract def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.evalInternal", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initializeInternal", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.nullable", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#nullable:Boolean", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/shim\/expressions\/StatefulLike.html", "kind" : "trait"}, {"name" : "com.sparkutils.shim.expressions.UnresolvedFunction4", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html", "members_object" : [{"label" : "unapply", "tail" : "(unresolvedFunction: UnresolvedFunction): Option[(String, Seq[Expression], Boolean, Option[Expression])]", "member" : "com.sparkutils.shim.expressions.UnresolvedFunction4.unapply", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#unapply(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):Option[(String,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Boolean,Option[org.apache.spark.sql.catalyst.expressions.Expression])]", "kind" : "def"}, {"label" : "apply", "tail" : "(nameParts: String, arguments: Seq[Expression], isDistinct: Boolean, filter: Option[Expression]): UnresolvedFunction", "member" : "com.sparkutils.shim.expressions.UnresolvedFunction4.apply", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#apply(nameParts:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],isDistinct:Boolean,filter:Option[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.analysis.UnresolvedFunction", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.UnresolvedFunction5", "shortDescription" : "Identifier is always a String (2.4 and 3 have a type)", "object" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html", "members_object" : [{"label" : "unapply", "tail" : "(unresolvedFunction: UnresolvedFunction): Option[(String, Seq[Expression], Boolean, Option[Expression], Boolean)]", "member" : "com.sparkutils.shim.expressions.UnresolvedFunction5.unapply", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#unapply(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):Option[(String,Seq[org.apache.spark.sql.catalyst.expressions.Expression],Boolean,Option[org.apache.spark.sql.catalyst.expressions.Expression],Boolean)]", "kind" : "def"}, {"label" : "apply", "tail" : "(nameParts: String, arguments: Seq[Expression], isDistinct: Boolean, filter: Option[Expression], ignoreNulls: Boolean): UnresolvedFunction", "member" : "com.sparkutils.shim.expressions.UnresolvedFunction5.apply", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#apply(nameParts:String,arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression],isDistinct:Boolean,filter:Option[org.apache.spark.sql.catalyst.expressions.Expression],ignoreNulls:Boolean):org.apache.spark.sql.catalyst.analysis.UnresolvedFunction", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/UnresolvedFunction5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.UnwrapOption2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: UnwrapOption): Option[(DataType, Expression)]", "member" : "com.sparkutils.shim.expressions.UnwrapOption2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.UnwrapOption):Option[(org.apache.spark.sql.types.DataType,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "def"}, {"label" : "apply", "tail" : "(dataType: DataType, child: Expression): UnwrapOption", "member" : "com.sparkutils.shim.expressions.UnwrapOption2.apply", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#apply(dataType:org.apache.spark.sql.types.DataType,child:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.objects.UnwrapOption", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/UnwrapOption2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.shim.expressions.WrapOption2", "shortDescription" : "", "object" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html", "members_object" : [{"label" : "unapply", "tail" : "(cast: WrapOption): Option[(Expression, DataType)]", "member" : "com.sparkutils.shim.expressions.WrapOption2.unapply", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#unapply(cast:org.apache.spark.sql.catalyst.expressions.objects.WrapOption):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.types.DataType)]", "kind" : "def"}, {"label" : "apply", "tail" : "(child: Expression, dataType: DataType): WrapOption", "member" : "com.sparkutils.shim.expressions.WrapOption2.apply", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#apply(child:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.objects.WrapOption", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/shim\/expressions\/WrapOption2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};